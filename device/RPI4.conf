# https://www.raspberrypi.org/products/raspberry-pi-4-model-b/

export MAKE_ARGS_DEV="
UBLDR_LOADADDR=0x42000000
"

export PRODUCT_KERNEL=SMP-ARM
export PRODUCT_TARGET=arm64
export PRODUCT_ARCH=aarch64
export PRODUCT_WANTS="aarch64-binutils qemu-user-static u-boot-rpi4 rpi-firmware"

export ARM_FIRMWARE_DIR="/usr/local/share/rpi-firmware"
export ARM_UBOOT_DIR="/usr/local/share/u-boot/u-boot-rpi4"

arm_install_uboot()
{

    cp -p ${ARM_UBOOT_DIR}/README               ${STAGEDIR}/boot/
    cp -p ${ARM_FIRMWARE_DIR}/LICENCE.broadcom  ${STAGEDIR}/boot/msdos

    cp -p ${ARM_UBOOT_DIR}/u-boot.bin           ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/armstub8-gic.bin  ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/bootcode.bin      ${STAGEDIR}/boot/msdos

    cp -p ${ARM_FIRMWARE_DIR}/fixup4.dat    ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/fixup4cd.dat  ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/fixup4db.dat  ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/fixup4x.dat   ${STAGEDIR}/boot/msdos

    cp -p ${ARM_FIRMWARE_DIR}/start4.elf    ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/start4cd.elf  ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/start4db.elf  ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/start4x.elf   ${STAGEDIR}/boot/msdos


    cp -p ${ARM_FIRMWARE_DIR}/config_rpi4.txt       ${STAGEDIR}/boot/msdos/config.txt
    cp -p ${ARM_FIRMWARE_DIR}/bcm2711-rpi-4-b.dtb   ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/bcm2711-rpi-400.dtb   ${STAGEDIR}/boot/msdos
    cp -p ${ARM_FIRMWARE_DIR}/bcm2711-rpi-cm4.dtb   ${STAGEDIR}/boot/msdos


    cp -pr ${ARM_FIRMWARE_DIR}/overlays ${STAGEDIR}/boot/msdos/overlays
    cp -pr ${STAGEDIR}/boot/dtb         ${STAGEDIR}/boot/msdos/dtb

}


arm_custom_fstab_setting(){
cat << EOF

# Device        Mountpoint  FStype  Options     Dump    Pass#
/dev/mmcsd0s1   /boot/efi   msdosfs rw,noatime  0 0
/dev/mmcsd0s2a  /       ufs rw,noatime      1 1
md      /tmp        mfs rw,noatime,-s50m    0 0
md      /var/log    mfs rw,noatime,-s15m    0 0
md      /var/tmp    mfs rw,noatime,-s12m    0 0

EOF
}

create_custom_image(){

    ARMSIZE=${1}
    ARMIMG=${2}

    truncate -s ${ARMSIZE} ${ARMIMG}

    DEV=$(mdconfig -a -t vnode -f ${ARMIMG} -x 63 -y 255)

    gpart create -s MBR ${DEV}
    gpart add -a 63 -b 63 -s 50m -t fat32lba ${DEV}
    gpart set -a active -i 1 ${DEV}
    gpart add -t freebsd -a 512k  ${DEV}
    gpart create -s BSD ${DEV}s2
    gpart add -t freebsd-ufs -a 64k ${DEV}s2

    newfs_msdos -L BOOT -F 16 /dev/${DEV}s1 >/dev/null
    newfs /dev/${DEV}s2a
    mount_msdosfs -l /dev/${DEV}s1 ${STAGEDIR}/boot/msdos
    mount /dev/${DEV}s2a ${STAGEDIR}
    echo ${DEV}
}